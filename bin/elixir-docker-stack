#!/bin/bash

# @link https://elixir-lang.org/getting-started/debugging.html
# @link https://s3.us-east-2.amazonaws.com/ferd.erlang-in-anger/text.v1.1.0.pdf
# @link https://mfeckie.github.io/Remote-Profiling-Elixir-Over-SSH/
# @link https://github.com/ferd/recon

set -eu

source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/docker/build.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/docker/utils.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/docker/database.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/docker/map-stack-versions.sh

source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/shell/utils/output.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/shell/utils/strings.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/shell/utils/sudo.sh

source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/stack/app.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/stack/utils.sh
source "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/bin/source/stack/observer.sh


################################################################################
# FUNCTIONS
################################################################################

  Trap_Exit()
  {
    ############################################################################
    # EXECUTION
    ############################################################################

      local exit_code=$?

      Print_Text_With_Label "TRAPPING EXIT" "Removing docker network on exit, only if no containers are attached to it." "4"

      # Remove_Docker_Network_If_Not_Active "${APP_NETWORK}"

      Remove_Docker_Network_If_Container_Is_Not_Running "${APP_NETWORK}" "${APP_CONTAINER_NAME}"

      exit ${exit_code}
  }

  Show_Help()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local script_name="${1? Missing help file name !!!}"

      local options_file="${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/docs/help/"${script_name}"-options.txt


    ############################################################################
    # EXECUTION
    ############################################################################

      cat "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/docs/help/"${script_name}"-header.txt

      if [ -f "${options_file}" ]; then

        cat "${options_file}"

      else

        local raw_options=$(cat "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/docs/help/options.txt)

        local options="${raw_options//__cli__/${script_name}}"

        echo "${options}"

      fi

      cat "${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/docs/help/"${script_name}"-commands.txt
  }


################################################################################
# MAIN
################################################################################

  Main()
  {
    ############################################################################
    # ELIXIR DOCKER STACK DEFAULTS
    ############################################################################

      ELIXIR_DOCKER_STACK_DATA_DIR=${ELIXIR_DOCKER_STACK_DATA_DIR:-~/.elixir-docker-stack-data}

      ELIXIR_DOCKER_STACK_INSTALL_DIR=${ELIXIR_DOCKER_STACK_INSTALL_DIR:-~/.elixir-docker-stack}

      if [ ! -d "${ELIXIR_DOCKER_STACK_INSTALL_DIR}" ]; then
        Print_Fatal_Error "Cannot find Elixir Docker Stack install dir: ${ELIXIR_DOCKER_STACK_INSTALL_DIR}"
      fi

      local is_local_docker_image=false

      local EDS_STACK_BUILD_SOURCE=hexpm

      local EDS_STACK_NAME=phoenix

      local EDS_OS_NAME=debian

      local EDS_OS_VERSION=stretch

      local EDS_PHOENIX_VERSION=1.6.2

      local EDS_ELIXIR_VERSION=1.12.3

      local EDS_ERLANG_OTP_VERSION=24.1.2

      local EDS_REBAR3_VERSION=3.17.0

      local EDS_DOCSH_VERSION=0.7.2

      local background_mode="-it"

      local EDS_APP_HTTP_PORT=4000
      local EDS_CONTAINER_HTTP_PORT=4000

      local EDS_APP_HTTPS_PORT=4001
      local EDS_CONTAINER_HTTPS_PORT=4001

      local EDS_INTERNAL_IP_ADDRESS="{0, 0, 0, 0}"

      local env_file=".env"

      local EDS_DATABASE_IMAGE=postgres:11-alpine

      local EDS_DATABASE_USER=postgres

      local EDS_DATABASE_COMMAND=postgres

      local seconds_to_wait_dummy_app_is_ready=1

      local seconds_to_wait_database_is_running=5

      local mix_env=dev

      local stack_defaults_file=.elixir-docker-stack-defaults

      local EDS_APP_IP=127.0.0.1

      # from `/home/user/project/app/acme` we will get `app_acme`
      # local APP_NAME=$(Get_Last_Two_Segments "${PWD}" "/" "_")
      local APP_NAME=$(Get_Last_Segment "${PWD}" "/")

      # from `.local_acme` we will get `local_acme`
      local APP_NAME=${APP_NAME//./}

      # from `.local/acme` we will get `.local`
      local APP_FOLDER_NAME=${PWD##*/}

      # from `.local` we will get `local`
      local APP_FOLDER_NAME=${APP_FOLDER_NAME//./}


      # We can override any of the above variables in the .elixir-docker-stack-defaults
      # file in the home directory or from the root for the project we are
      # working on.
      #
      # Bear in mind that some can be override if provided as an argument or option
      # to this bash script.
      if [ -f ~/"${stack_defaults_file}" ]; then
        source ~/"${stack_defaults_file}"
      fi

      # It will override any variable already declared the ~/.elixir-docker-stack-defaults.
      #
      # Bear in mind that some can be override if provided as an argument or option
      # to this bash script.
      if [ -f "./${stack_defaults_file}" ]; then
        source "./${stack_defaults_file}"
      fi

      if [ -f "./${stack_defaults_file}.local" ]; then
        source "./${stack_defaults_file}.local"
      fi


    ############################################################################
    # CONSTANTS
    ###########################################################################

      local APP_PATH="${PWD}"

      local VENDOR_NAME=exadra37

      local DOCKER_BUILD_PATH="${ELIXIR_DOCKER_STACK_INSTALL_DIR}"/docker/build

      # from `/home/username/developer/acme` we will get `developer/acme`
      local CURRENT_PATH="${PWD#*${USER}/}"

      # from `developer/acme/my-app` we get `~/.elixir-docker-stack-data/developer_acme_my-app`
      local HOST_SETUP_PATH="${ELIXIR_DOCKER_STACK_DATA_DIR}/${CURRENT_PATH//\//_}"

      local APP_USER_NAME=developer

      local APP_CONTAINER_NAME="${APP_NAME}_app"

      local APP_NETWORK="${APP_NAME}"

      local APP_NODE_NAME=""

      local ERLANG_COOKIE="super-long-secret-cookie"

      local APP_HOST_DIR="${PWD}"

      local APP_CONTAINER_RELATIVE_PATH=workspace

      local CONTAINER_ENV=""

      local SUDO_PREFIX=$(Sudo_Prefix)

      local VERBOSE_LEVEL=0


    ############################################################################
    # VARS
    ############################################################################

      local EDS_PHOENIX_COMMAND=phx.server

      # from 1.4.0 assigns 1.4
      local phoenix_major_version="${EDS_PHOENIX_VERSION%.*}"

      # Phoenix framework installation procedure changed from 1.4 onwards.
      if [ "${phoenix_major_version}" \< "1.4" ]; then
        EDS_PHOENIX_COMMAND=phoenix.server
      fi

      local container_username=""

      local observer_username=observer

      local EDS_PHOENIX_VERSION=$( Map_Version_For_Docker_Tag ${EDS_PHOENIX_VERSION} ${EDS_STACK_NAME} ${EDS_STACK_BUILD_SOURCE} )

      local EDS_ERLANG_OTP_VERSION=$( Map_Version_For_Docker_Tag ${EDS_ERLANG_OTP_VERSION} ${EDS_STACK_NAME} ${EDS_STACK_BUILD_SOURCE} )

      local EDS_ELIXIR_VERSION=$( Map_Version_For_Docker_Tag ${EDS_ELIXIR_VERSION} ${EDS_STACK_NAME} ${EDS_STACK_BUILD_SOURCE} )

      local IS_TO_PUBLISH_PORTS="false"


    ############################################################################
    # PARSE INPUT / EXECUTION
    ############################################################################

      mkdir -p "${HOST_SETUP_PATH}"

      #trap "Trap_Exit" SIGINT SIGKILL SIGTERM
      trap "Trap_Exit" EXIT

      local app_container_command=${0##*/}

      for input in "${@}"; do
        case "${input}" in

          --bs | --build-source )
            Print_Text_With_Label "OPTION" "--bs, --build-source" "4"

            local EDS_STACK_BUILD_SOURCE="${2? Missing build source for the docker image !!!}"
            shift 2
          ;;

          -d | --detach )
            Print_Text_With_Label "OPTION" "-d, --detach" "4"

            background_mode="--detach"
            shift 1
          ;;

          --db | --database )
            Print_Text_With_Label "OPTION" "--db, --database" "4"

            shift 1

            Add_Database_If_Required

            Start_Or_Attach_To_Database_Container \
              "${EDS_DATABASE_IMAGE}" \
              "${EDS_DATABASE_USER}" \
              "--detach" \
              "${EDS_DATABASE_COMMAND}"
          ;;

          --di | --database-image )
            Print_Text_With_Label "OPTION" "--di, --database-image" "4"

            local EDS_DATABASE_IMAGE="${2? Missing database image to use!!!}"
            shift 2
          ;;

          -e | --env )
            Print_Text_With_Label "OPTION" "-e, --env" "4"

            CONTAINER_ENV="${CONTAINER_ENV} --env ${2? Missing env variable !!!}"
            shift 2
          ;;

          --eov | --erlang-otp-version )
            Print_Text_With_Label "OPTION" "--eov, --erlang-otp-version" "4"

            local EDS_ERLANG_OTP_VERSION="${2? Missing Erlang OTP version!!!}"

            local EDS_ERLANG_OTP_VERSION=$( Map_Erlang_Version_For_Erlang_Solutions ${EDS_ERLANG_OTP_VERSION} ${EDS_STACK_BUILD_SOURCE} )

            shift 2
          ;;

          --ev | --elixir-version )
            Print_Text_With_Label "OPTION" "--ev, --elixir-version" "4"

            local EDS_ELIXIR_VERSION="${2? Missing Elixir version!!!}"

            local EDS_ELIXIR_VERSION=$( Map_Elixir_Version_For_Erlang_Solutions ${EDS_ELIXIR_VERSION} ${EDS_STACK_BUILD_SOURCE} )

            shift 2
          ;;

          -h | --help )
            Print_Text_With_Label "OPTION" "-h, --help" "4"

            local help="${app_container_command}-${2:-cli}"

            shift $#

            case "${help}" in

              eds* )
                Show_Help "eds"
                exit 0
              ;;

              elixir-cli )
                local app_container_command="${app_container_command} --help"
                break
              ;;

              elixir-stack )
                Show_Help "elixir"
                exit 0
              ;;

              erl* )
                local app_container_command="${app_container_command} --help"
                break
              ;;

              iex* )
                local app_container_command="${app_container_command} --help"
                break
              ;;

              mix-cli )
                local app_container_command="mix help"
                break
              ;;

              mix-stack )
                Show_Help "mix"
                exit 0
              ;;

              rebar* )
                local app_container_command="${app_container_command} --help"
                break
              ;;

              * )
                Print_Fatal_Error "Help is not available or you misspelled the command."
                exit 0

            esac
          ;;

          -it )
            Print_Text_With_Label "OPTION" "-it" "4"

            local background_mode="-it"
            shift 1
          ;;

          --mix-env )
            Print_Text_With_Label "OPTION" "--mix-env" "4"

            local mix_env="${2? Missing mix env value. One of dev,prod or test!!!}"

            shift 2
          ;;

          --name )

            if [ ${app_container_command} == "iex" ]; then
              # When we want to run locally two or more docker containers
              # simulating nodes across different machines we need to start iex
              # in separated containers, that will share the same docker network.
              #
              # So, if we start two iex sessions, one with iex --name user@example.com
              # and another with iex --name user@exadra37.com, then each will be
              # able to connect to the other, because docker will route example.com
              # and exadra37.com through the shared docker network, and once the
              # docker containers have the same names as the domains they will
              # be the ones handling the connection, thus not trying to reach
              # the real domains on the internet.

              # from user@example.com we get example.com
              APP_CONTAINER_NAME=$(Get_Last_Segment "${2}" "@")

              # the docker network that containers started with iex --name must
              # share in order for the nodes be able to connect to each other.
              APP_NETWORK="elixir-docker-stack"
            fi

          ;;

          --no-cache )
            # not implemented yet
          ;;

          -p | --port )
            Print_Text_With_Label "OPTION" "-p, --port" "4"

            IS_TO_PUBLISH_PORTS="true"

            local EDS_APP_HTTP_PORT=${2? Missing port to publish for the container, eg: 4800 !!!}
            local EDS_CONTAINER_HTTP_PORT=${EDS_APP_HTTP_PORT}

            shift 2
          ;;

          --port-https )
              Print_Text_With_Label "OPTION" "--port-https" "4"

              IS_TO_PUBLISH_PORTS="true"

              local EDS_APP_HTTPS_PORT=${2? Missing port to publish for the container, eg: 4800 !!!}
              local EDS_CONTAINER_HTTPS_PORT=${EDS_APP_HTTPS_PORT}

              shift 2
            ;;

          --pv | --phoenix-version )
            Print_Text_With_Label "OPTION" "--pv, --phoenix-version" "4"

            local EDS_PHOENIX_VERSION="${2? Missing Phoenix version!!!}"
            shift 2
          ;;

          --osv | --os-version )
            Print_Text_With_Label "OPTION" "--osv, --os-version" "4"

            local EDS_OS_VERSION="${2? Missing OS Version, e.g. debian, slim, ubuntu, alpine}"

            shift 2
          ;;

          --sn | --stack-name )
            Print_Text_With_Label "OPTION" "--sn, --stack-name" "4"

            local EDS_STACK_NAME="${2? Missing Docker stack to build !!!}"

            shift 2
          ;;

          -u | --user )
            Print_Text_With_Label "OPTION" "-u, --user" "4"

            local container_username=${2? Missing user for container!!!}
            shift 2
          ;;

          --verbose )
            Print_Text_With_Label "OPTION" "--verbose" 4

            shift 1

            local VERBOSE_LEVEL=${1:-${VERBOSE_LEVEL}}

            if [ "$#" -ge 1 ]; then
              shift 1
            fi
          ;;

          --wda | --wait-dummy-app )
            Print_Text_With_Label "OPTION" "--wda, --wait-dummy-app" "4"

            local seconds_to_wait_dummy_app_is_ready="${2? Missing seconds to wait for dummy app container to be ready!!!}"
            shift 2
          ;;

          --wd | --wait-database )
            Print_Text_With_Label "OPTION" "--wd, --wait-database" "4"

            local seconds_to_wait_database_is_running="${2? Missing seconds to wait for the database to be running!!!}"
            shift 2
          ;;

          build )
            Print_Text_With_Label "COMMAND" "build" "4"

            shift 1
            local EDS_STACK_NAME="${1:-${EDS_STACK_NAME}}"

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            Build_Docker_Stack \
              "${EDS_STACK_NAME}" \
              "${EDS_STACK_BUILD_SOURCE}" \
              "${EDS_PHOENIX_VERSION}" \
              "${EDS_ELIXIR_VERSION}" \
              "${EDS_ERLANG_OTP_VERSION}" \
              "${EDS_OS_NAME}" \
              "${EDS_OS_VERSION}" \
              "${is_local_docker_image}" \
              ${@}

            exit 0
          ;;

          container-logs )
            Print_Text_With_Label "COMMAND" "container-logs" "4"

            ${SUDO_PREFIX} docker logs -f "${APP_CONTAINER_NAME}"
            exit 0
          ;;

          down )
            Print_Text_With_Label "COMMAND" "down" "4"

            Stop_And_Remove_Docker_Containers \
              "${APP_CONTAINER_NAME}" \
              "$( Build_Database_Container_Name ${EDS_DATABASE_IMAGE} )"

            Remove_Docker_Network "${APP_NETWORK}"

            exit 0
          ;;

          logs )
            "${SUDO_PREFIX}" docker logs --follow "${APP_CONTAINER_NAME}"
            exit 0
          ;;

          new-database )
            Print_Text_With_Label "COMMAND" "new-database" "4"

            shift 1
            local database_name="${1:-${APP_NAME}_dev}"

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            Run_Database_Command \
              "${EDS_DATABASE_IMAGE}" \
              "${EDS_DATABASE_USER}" \
              "${EDS_DATABASE_COMMAND}" \
              "${seconds_to_wait_database_is_running}" \
              "--detach" \
              "createdb -O postgres -U postgres ${database_name}"

            exit 0
          ;;

          npm-install )
            shift 1
            local background_mode="-it"
            local app_container_command="npm install --prefix ./assets"
          ;;

          observer )
            Print_Text_With_Label "COMMAND" "observer" "4"

            shift 1

            if [ -z "${container_username}" ]; then
              local container_username="${observer_username}"
            fi

            # @TODO
            #  * observer_cli binary seems not be able to connect to the remote node
            #  * https://chazsconi.github.io/2017/04/22/observing-remote-elixir-docker-nodes.html
            #app_container_command="observer_cli elixir@b09b4f769088 ${ERLANG_COOKIE}"

            Start_Observer_Container \
              "${HOST_SETUP_PATH}" \
              "${APP_NAME}" \
              "${APP_NETWORK}" \
              "${APP_CONTAINER_NAME}" \
              "${ERLANG_COOKIE}" \
              "${container_username}" \
              ${@}

            exit 0
          ;;

          pgcli )
            Print_Text_With_Label "COMMAND" "pgcli" "4"
            shift 1

            app_container_command="pgcli"

            if [ "$#" -eq 0 ]; then
              Print_Fatal_Error "Missing option and arguments."
            fi

            break
          ;;

          new | phoenix.new | phx.new )
            Print_Text_With_Label "COMMAND" "${1}" "4"

            # break parsing the input if --version option is given.
            case "${2:-}" in
              --version )
                break
              ;;
            esac

            # Remove_Docker_Network "${APP_NETWORK}"

            local APP_NAME="${2? Missing path to create the new app!!!}"

            # Given that we are creating the new Phoenix app `hello` from
            #  `/home/user/acme` we will have an `APP_NAME=acme_hello`.
            # The same APP_NAME will be used when running commands inside the
            #  `/home/user/acme/hello`, and it's inferred by calling on the
            #  top of this script when calling `Get_Last_Two_Segments`.
            local APP_NAME="${APP_FOLDER_NAME}_${APP_NAME}"

            # Nees to be the name of the app, not of the current folder.
            local APP_FOLDER_NAME="${2}"
            local APP_FOLDER_NAME=${APP_FOLDER_NAME//./}

            local APP_NETWORK="${APP_NAME}"

            local APP_PATH="${APP_PATH}/${APP_FOLDER_NAME}"

            # Create_Docker_Network_If_Not_Exists "${APP_NETWORK}"

            if [ -z "${container_username}" ]; then
              local container_username="${APP_USER_NAME}"
            fi

            Start_Or_Attach_To_App_Container \
              "${EDS_STACK_NAME}" \
              "${EDS_STACK_BUILD_SOURCE}" \
              "${EDS_APP_HTTP_PORT}" \
              "${EDS_OS_NAME}" \
              "${EDS_OS_VERSION}" \
              "${is_local_docker_image}" \
              "${EDS_ERLANG_OTP_VERSION}" \
              "${EDS_ELIXIR_VERSION}" \
              "${EDS_PHOENIX_VERSION}" \
              "${container_username}" \
              "${mix_env}" \
              "${env_file}" \
              "${background_mode}" \
              "${app_container_command}" \
              ${@}

            # Pinning defaults to be used each time we run the Elixir Docker Stack
            echo "EDS_STACK_NAME=${EDS_STACK_NAME}" > "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_STACK_BUILD_SOURCE=${EDS_STACK_BUILD_SOURCE}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_APP_IP=${EDS_APP_IP}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_APP_HTTP_PORT=${EDS_APP_HTTP_PORT}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_CONTAINER_HTTP_PORT=${EDS_CONTAINER_HTTP_PORT}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_APP_HTTPS_PORT=${EDS_APP_HTTPS_PORT}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_CONTAINER_HTTPS_PORT=${EDS_CONTAINER_HTTPS_PORT}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_OS_NAME=${EDS_OS_NAME}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_OS_VERSION=${EDS_OS_VERSION}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_ERLANG_OTP_VERSION=${EDS_ERLANG_OTP_VERSION}" >> "${APP_PATH}/${stack_defaults_file}"
            echo "EDS_ELIXIR_VERSION=${EDS_ELIXIR_VERSION}" >> "${APP_PATH}/${stack_defaults_file}"

            case "${1:-}" in
              phx.new | phoenix.new )
                echo "EDS_PHOENIX_VERSION=${EDS_PHOENIX_VERSION}" >> "${APP_PATH}/${stack_defaults_file}"
                echo "EDS_PHOENIX_COMMAND=${EDS_PHOENIX_COMMAND}" >> "${APP_PATH}/${stack_defaults_file}"
              ;;
            esac

            Add_Database_If_Required

            exit 0
          ;;

          phx.server | phoenix.server )
            IS_TO_PUBLISH_PORTS="true"
            Print_Text_With_Label "APP LISTENING ON: " "${EDS_APP_IP}:${EDS_APP_HTTP_PORT}:${EDS_CONTAINER_HTTP_PORT}" "0"
          ;;

          test )
            Print_Text_With_Label "COMMAND" "test" "4"

            # Necessary when running `mix test`
            local mix_env=test
          ;;

          up )
            Print_Text_With_Label "COMMAND" "up" "4"

            IS_TO_PUBLISH_PORTS="true"

            shift 1

            if [ -z "${container_username}" ]; then
              local container_username="${APP_USER_NAME}"
            fi

            Start_Dummy_App_Container \
              "${EDS_STACK_NAME}" \
              "${EDS_STACK_BUILD_SOURCE}" \
              "${EDS_APP_HTTP_PORT}" \
              "${EDS_OS_NAME}" \
              "${EDS_OS_VERSION}" \
              "${is_local_docker_image}" \
              "${EDS_ERLANG_OTP_VERSION}" \
              "${EDS_ELIXIR_VERSION}" \
              "${EDS_PHOENIX_VERSION}" \
              "${container_username}" \
              "${mix_env}" \
              "${env_file}" \
              "${seconds_to_wait_dummy_app_is_ready}"

            if [ -z "${1:-}" ]; then
              if ! Is_Phoenix_App "${APP_FOLDER_NAME}" ; then
                local EDS_PHOENIX_COMMAND=""
              fi
            else
              local EDS_PHOENIX_COMMAND="${1}"
            fi

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            # we need to set the --cookie and -sname in order to be able to use the
            # Observer from another docker container in the same docker network.
            # The run command will execute inside the container:
            #   $ elixir --name video-hup_app@172.0.0.2 --cookie some-long-super-secret  -S mix phx.server"
            local app_container_command="elixir-server ${APP_NAME} ${ERLANG_COOKIE} mix ${EDS_PHOENIX_COMMAND}"

            break
          ;;

          shell )
            Print_Text_With_Label "COMMAND" "Shell" "4"

            local background_mode="-it"

            shift 1

            local app_container_command=${1:-zsh}

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            break
          ;;

        esac
      done


    ############################################################################
    # EXECUTION
    ############################################################################

      if [ "${app_container_command}" = "eds" ] && [ "$#" -eq 0  ]; then
        Show_Help "eds"
        exit 0
      fi

      if [ -z "${container_username}" ]; then
        local container_username="${APP_USER_NAME}"
      fi

      Replace_IP_Address "${EDS_INTERNAL_IP_ADDRESS}" "${APP_PATH}"
      Replace_Http_Port "${EDS_APP_HTTP_PORT}" "${APP_PATH}"

      Start_Or_Attach_To_App_Container \
        "${EDS_STACK_NAME}" \
        "${EDS_STACK_BUILD_SOURCE}" \
        "${EDS_APP_HTTP_PORT}" \
        "${EDS_OS_NAME}" \
        "${EDS_OS_VERSION}" \
        "${is_local_docker_image}" \
        "${EDS_ERLANG_OTP_VERSION}" \
        "${EDS_ELIXIR_VERSION}" \
        "${EDS_PHOENIX_VERSION}" \
        "${container_username}" \
        "${mix_env}" \
        "${env_file}" \
        "${background_mode}" \
        "${app_container_command}" \
        ${@}

    exit $?
  }

Main "${@}"
