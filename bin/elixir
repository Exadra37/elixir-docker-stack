#!/bin/bash

set -eu

################################################################################
# DEFAULTS
################################################################################

  IMAGE_NAME=exadra37/elixir-phoenix
  VARIANT=alpine
  ELIXIR_VERSION=1.8
  PHOENIX_VERSION=1.4.0
  CONTAINER_USER=$(id -u)
  COMMAND=elixir
  BUILD_PATH=~/bin/vendor/exadra37-docker/elixir/dev-cli/docker/build
  BACKGROUND_MODE="-it"
  PORT_MAP="4000:4000"

  ELIXIR_HOST_DIR="${PWD}"/.local
  POSTGRES_DATA_DIR="${ELIXIR_HOST_DIR}"/var/lib/postgresql

  # from `/home/username/developer/acme` we will get `developer/acme`
  CURRENT_PATH="${PWD#*${USER}/}"

  # from `developer/acme` we get `developer_acme`
  CONTAINER_NAME="${CURRENT_PATH//\//_}"


################################################################################
# FUNCTIONS
################################################################################

  function Get_Docker_Image_Tag
  {
    local _elixir_version="${1? Missing Elixir Version!!!}"
    local _phoenix_version="${2? Missing Phoenix version!!!}"
    local _variant="${3? Missing variant for docker image!!!}"

    echo "${_elixir_version}-${_phoenix_version}-${_variant}"
  }

  function Build_Docker_Image
  {
    local _image_name="${1? Missing docker image name!!!}"
    local _tag="${2? Missing docker image tag!!!}"
    local _build_path="${3? Missing build path for docker image!!!}"
    local _variant="${4? Missing variant for docker image!!!}"

    sudo docker build \
        --file "${_build_path}"/${_variant}".Dockerfile" \
        -t ${_image_name}:${_tag} \
        "${_build_path}"
  }

  function Start_Docker_Container
  {
    TAG=$( Get_Docker_Image_Tag "${ELIXIR_VERSION}" "${PHOENIX_VERSION}" "${VARIANT}" )

    # Setup X11 server authentication
    # @link http://wiki.ros.org/docker/Tutorials/GUI#The_isolated_way
    local _xauth_display=":0"
    local _xsock=/tmp/.X11-unix
    local _xauth="${ELIXIR_HOST_DIR}"/.docker.xauth
    touch "${_xauth}"
    xauth nlist "${_xauth_display}" | sed -e 's/^..../ffff/' | xauth -f "${_xauth}" nmerge -

      #--volume /usr/share/icons:/usr/share/icons:ro \
    sudo docker run \
      --rm \
      ${BACKGROUND_MODE} \
      --name "${CONTAINER_NAME}" \
      --user ${CONTAINER_USER} \
      --publish "127.0.0.1:"${PORT_MAP} \
      --volume "${PWD}":/home/elixir/workspace \
      --volume "${CONTAINER_NAME}_${VARIANT}":/var/lib/postgresql \
      --volume="${_xsock}":"${_xsock}":ro \
      --volume="${_xauth}":"${_xauth}":ro \
      --env="XAUTHORITY=${_xauth}" \
      ${IMAGE_NAME}:${TAG} \
      ${COMMAND} ${@}
  }


################################################################################
# PARSE INPUT / EXECUTION
################################################################################

  if [ -f .env ]; then
    source .env
  fi

  mkdir -p "${ELIXIR_HOST_DIR}" "${POSTGRES_DATA_DIR}"

  for argument in "${@}"; do
    case "${argument}" in

      --elixir-version )
        ELIXIR_VERSION="${2? Missing Elixir version!!!}"
        shift 2
        ;;

      --phoenix-version )
        PHOENIX_VERSION="${2? Missing Phoenix version!!!}"
        shift 2
        ;;

      -d | --detached )
        BACKGROUND_MODE="--detach"
        shift 1
        ;;

      --db | --database )
        CURRENT_BACKGROUND_MODE=${BACKGROUND_MODE}
        sudo docker volume create "${CONTAINER_NAME}_${VARIANT}"
        COMMAND="postgres"
        BACKGROUND_MODE="--detach"
        shift 1
        Start_Docker_Container
        BACKGROUND_MODE=${CURRENT_BACKGROUND_MODE}
        ;;

      -p | --port-map )
        PORT_MAP=${2? Missing host port map for the container, eg: 3000:3000 !!!}
        shift 2
        ;;

      -u | --user )
        CONTAINER_USER=${2? Missing user for container!!!}
        shift 2
        ;;

      --variant )
        VARIANT="${2? Missing variant for docker image... eg: alpine}"
        shift 2
        ;;

      build )
        TAG=$( Get_Docker_Image_Tag "${ELIXIR_VERSION}" "${PHOENIX_VERSION}" "${2:-${VARIANT}}" )
        Build_Docker_Image "${IMAGE_NAME}" "${TAG}" "${BUILD_PATH}" "${VARIANT}"
        exit 0
        ;;

      container-logs )
        sudo docker logs -f ${CONTAINER_NAME}
        exit 0
        ;;

      down )
        sudo docker stop "${CONTAINER_NAME}"
        exit 0
        ;;

      iex | mix | pgcli )
        COMMAND=${1}
        shift 1
        ;;

      phx.server )
        COMMAND="mix phx.server"
        shift 1
        sudo docker exec ${BACKGROUND_MODE} ${CONTAINER_NAME} ${COMMAND} ${@}

        if [ "${BACKGROUND_MODE}" == "-it" ]; then
          sudo docker stop ${CONTAINER_NAME}
        fi

        exit 0
        ;;

      shell )
        shift 1
        COMMAND=${1:-zsh}

        if [ "$#" -ge 1 ]; then
          shift 1
        fi

        ;;

    esac
  done


################################################################################
# EXECUTION
################################################################################

  if sudo docker container ls -a | grep -q "${CONTAINER_NAME}" -; then
    sudo docker exec --user ${CONTAINER_USER} ${BACKGROUND_MODE} ${CONTAINER_NAME} ${COMMAND} ${@}
    exit 0
  fi

  Start_Docker_Container
