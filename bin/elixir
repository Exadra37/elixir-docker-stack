#!/bin/bash

# @link https://elixir-lang.org/getting-started/debugging.html
# @link https://s3.us-east-2.amazonaws.com/ferd.erlang-in-anger/text.v1.1.0.pdf

set -eu

  Show_Help()
  {
    cat << HEREDOC

ELIXIR DOCKER DEV STACK

A docker developemnt stack that includes Elixir, Phoenix, Erlang, Oberver and Postgres.


Usage:

  elixir [options] [command] [args]


Options:

  --elixir-version   The Elixir version to be used for the docker tag,
                     Defaults to: latest

  --phoenix-version  The Phoenix version to be installed in the docker image.
                     Defaults to the last release, eg: 1.4.3 .

  -d, --detached     Run the docker container detached from the terminal.

  -it                Run the docker container attached to the terminal.

  --db, --database   Starts the container with the Postgres database running.

  -p, --publish      Map the host ports to the docker container ports.
                     Defaults to: 4000:4000 .

  -u, --user         The user we want to run inside the container,
                     Defaults to current user, eg: 1000 .

  --dockerfile       The dockerfile to build the container form.
                     Defaults to: debian .


Commands:
  build              Builds the docker image for the given dodkerfile.
                     Defaults to build from: debian .
                      $ elixir build
                      $ elixir build alpine

  container-logs     Shows a tail -f of the container logs.
                      $ elixir xontainer-logs

  down               Stops and removes the running container.
                      $ elixir down

  iex                The Elixir shell.
                      $ elixir iex [options] <args>

  mix                The Elixir mix tool.
                      $ elixir mix [options] <args>

  pgcli              A better shell for Postgres, includes uto-completion.
                      $ elixir pgcli [options] <args>

  observer           Displays the GUI for Observer.
                      $ elixir observer

  observer-cli       Observer displayed in the likes og Htop for linux.
                      $ elixir observer-cli

  up                 Starts the docker stack.
                      $ elixir up
                      $ elixir --db up

  shell              A shell enside the container for the docker stack.
                      $ elixir shell
                      $ elixir -u 0 shell

HEREDOC

  }

################################################################################
# FUNCTIONS
################################################################################



  Create_Env_File_If_Not_Exists()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local suffix="${1:-.docker-container}"
      local example_suffix="${2:--example}"


    ############################################################################
    # EXECUTION
    ############################################################################

      # Useful to pass environment variables into the container.
      if [ ! -f .env"${suffix}" ]; then
        if [ -f .env"${suffix}${example_suffix}" ]; then
          cp .env"${suffix}${example_suffix}" .env"${suffix}"
        else
          touch .env"${suffix}"
        fi
      fi
  }

  Setup_X11_Server_Display()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local host_setup_dir="${1? Missing host setup dir!!!}"
      local xauth_display="${2:-:0}"


    ############################################################################
    # VARS
    ############################################################################

      local xauth="${host_setup_dir}"/.docker.xauth


    ############################################################################
    # EXECUTION
    ############################################################################

      # @link http://wiki.ros.org/docker/Tutorials/GUI#The_isolated_way
      touch "${xauth}"
      xauth nlist "${xauth_display}" | sed -e 's/^..../ffff/' | xauth -f "${xauth}" nmerge -

      echo "${xauth}"
  }

  Get_Container_Ip_Address()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local container_name="${1? Missing container name!!!}"


    ############################################################################
    # EXECUTION
    ############################################################################

      echo -n $( sudo docker exec -it ${container_name} sh -c 'echo -n $(hostname -i)' )
  }

  Get_Docker_Image_Tag()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local elixir_version="${1? Missing Elixir Version!!!}"
      local phoenix_version="${2? Missing Phoenix version!!!}"
      local dockerfile="${3? Missing variant for docker image!!!}"


    ############################################################################
    # EXECUTION
    ############################################################################

      if [ "${dockerfile}" = "observer-debian" ]; then
        echo "${elixir_version}"
      else
        echo "${elixir_version}-${phoenix_version}-${dockerfile}"
      fi
  }

  Create_Docker_Volume()
  {
    local container_name="${1? Missing container name!!!}"

    printf "\n---> CREATING DOCKER VOLUME: ${container_name}\n"

    sudo docker volume create "${container_name}"
  }

  Build_Docker_Image()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local image_name="${1? Missing docker image name!!!}"
      local dockerfile="${2? Missing variant for docker image!!!}"
      local elixir_version="${3? Missing Elixir version!!!}"
      local phoenix_version="${4? Missing Phoenix version!!!}"
      local phoenix_install_from="${5? Missing Phoenix install command!!!}"
      local build_path="${6? Missing build path for docker image!!!}"


    ############################################################################
    # VARS
    ############################################################################

      if [ "${dockerfile}" = "observer-debian" ]; then
        local image_name=exadra37/observer
        local elixir_version=latest
      fi

      local tag="$( Get_Docker_Image_Tag "${elixir_version}" "${phoenix_version}" "${dockerfile}" )"
      local docker_image="${image_name}:${tag}"

      local dockerfile_path="${build_path}"/${dockerfile}".Dockerfile"


    ############################################################################
    # EXECUTION
    ############################################################################

      printf "\n---> BUILDING FROM DOCKERFILE: ${dockerfile_path}\n"

      printf "\n---> DOCKER IMAGE: ${docker_image}\n"

      printf "\n---> INSTALL PHOENIX: ${phoenix_install_from}\n"

      sudo docker build \
        --no-cache \
        --force-rm \
        --pull \
        --file "${dockerfile_path}" \
        --build-arg "ELIXIR_VERSION=${elixir_version}" \
        --build-arg "PHOENIX_VERSION=${phoenix_version}" \
        --build-arg "PHOENIX_INSTALL_FROM=${phoenix_install_from}" \
        --tag ${docker_image} \
        "${build_path}"
  }

  Attach_To_Docker_Container()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local container_name="${1? Missing container name!!!}"
      local container_user="${2? Missing container user!!!}"
      local background_mode="${3? Missing backround mode to run the container!!!}"
      local run_command="${4? Missing command to run in the container!!!}"

      shift 4


    ############################################################################
    # EXECUTION
    ############################################################################

      printf "\n---> ATTACHING TO CONTAINER: ${container_name}\n"

      printf "\n---> INVOKED COMMAND: ${run_command}\n\n"

      sudo docker exec \
        --user ${container_user} \
        --env "APP_NODE_NAME=${APP_NODE_NAME}" \
        --env "APP_NODE_COOKIE=${ELIXIR_NODE_COOKIE}" \
        ${background_mode} \
        ${container_name} \
        ${run_command} ${@}
  }

  Docker_Container_Is_Running()
  {
    sudo docker container ls -a | grep -q "${container_name}" -

    return $?
  }

  Start_Docker_Container()
  {
    ############################################################################
    # INPUT
    ############################################################################

      local image_name="${1? Missing docker image name!!!}"
      local elixir_version="${2? Missing Elixir version!!!}"
      local phoenix_version="${3? Missing Phoenix version!!!}"
      local dockerfile="${4? Missing docker image variant!!!}"
      local app_name="${5? Missing the APP name!!!}"
      local container_name="${6? Missing container name!!!}"
      local container_user="${7? Missing container user!!!}"
      local background_mode="${8? Missing backround mode to run the container!!!}"
      local run_command="${9? Missing command to run in the container!!!}"
      local host_setup_dir="${10? Missing host dir for Elixir stack setup!!!}"

      shift 10


    ############################################################################
    # VARS
    ############################################################################

      if [ "${dockerfile}" = "observer-debian" ]; then
        image_name=exadra37/observer
        elixir_version=latest
      fi

      local tag="$( Get_Docker_Image_Tag "${elixir_version}" "${phoenix_version}" "${dockerfile}" )"

      local docker_image="${image_name}:${tag}"

      local xauth_sock="/tmp/.X11-unix"

      local xauth=$( Setup_X11_Server_Display "${host_setup_dir}" )


    ############################################################################
    # EXECUTION
    ############################################################################


      if Docker_Container_Is_Running "${container_name}"; then

        Attach_To_Docker_Container \
          "${container_name}" \
          "${container_user}" \
          "${background_mode}" \
          "${run_command}"

        # if [ "${background_mode}" == "-it" ]; then
        #   sudo docker stop "${container_name}"
        # fi

        exit 0
      fi

      printf "\n---> STARTING DOCKER IMAGE: ${docker_image}\n"

      printf "\n---> CONTAINER USER: ${container_user}\n"

      printf "\n---> INVOKED COMMAND: ${run_command}\n\n"

      sudo docker network create observer &> /dev/null || true

      sudo docker run \
        --rm \
        "${background_mode}" \
        --env-file .env.docker-container \
        --env "APP_NODE_NAME=${APP_NODE_NAME}" \
        --env "APP_NODE_COOKIE=${ELIXIR_NODE_COOKIE}" \
        --name "${container_name}" \
        --user "${container_user}" \
        --network observer \
        --publish "127.0.0.1:${port_map}" \
        --volume "${PWD}":/home/"${container_user}"/workspace \
        --volume "${container_name}_${tag}_var_lib_postgresql":/var/lib/postgresql \
        --volume "${container_name}_${tag}_var_log_postgresql":/var/log/postgresql \
        --volume "${container_name}_${tag}_config_sublime_text_3":/home/"${container_user}"/.config/sublime-text-3 \
        --volume="/tmp/.X11-unix":"/tmp/.X11-unix":ro \
        --volume="${xauth}":"${xauth}":ro \
        --env="XAUTHORITY=${xauth}" \
        "${docker_image}" \
        ${run_command} ${@}
  }


################################################################################
# MAIN
################################################################################

  Main()
  {
    ############################################################################
    # ENV
    ############################################################################

      image_name=exadra37/elixir-phoenix
      dockerfile=debian
      elixir_version=1.8-slim
      phoenix_version=1.4.0
      run_command=elixir
      build_path=~/bin/vendor/exadra37-docker/elixir/dev-cli/docker/build
      background_mode="-it"
      port_map="4000:4000"
      elixirhost_setup_dir="${PWD}"/.local
      env_file_suffix=".docker-container"
      env_file_example_suffix="-example"

      # We can override any of the above variables in the .env.elixir-docker-stack file
      #   for the current project we are working on.
      # Bear in mind that some can be override if provided as an argument or option
      #   to this bash script.
      if [ -f .env.elixir-docker-stack ]; then
        source .env.elixir-docker-stack
      fi

      phoenix_install_from="hex phx_new ${phoenix_version}"

      # from 1.4.0 assigns 1.4
      version="${phoenix_version%.*}"

      # Phoenix framework installation procedure changed from 1.4 onwards.
      if [ "${version}" \< "1.4" ]; then
        phoenix_install_from="https://github.com/phoenixframework/archives/raw/master/phx_new-${phoenix_version}.ez"
      fi


    ############################################################################
    # CONSTANTS
    ############################################################################

      # from `/home/username/developer/acme` we will get `developer/acme`
      CURRENT_PATH="${PWD#*${USER}/}"

      APP_NAME="${CURRENT_PATH//\//_}"

      APP_NODE_NAME=""

      # from `developer/acme` we get `developer_acme`
      CONTAINER_NAME="${APP_NAME}_$( Get_Docker_Image_Tag "${elixir_version}" "${phoenix_version}" "${dockerfile}" )"

      CONTAINER_USER=elixir

      ELIXIR_NODE_COOKIE="super-long-secret-cookie"


    ############################################################################
    # PARSE INPUT / EXECUTION
    ############################################################################

      mkdir -p "${elixirhost_setup_dir}"

      Create_Env_File_If_Not_Exists "${env_file_suffix}" "${env_file_example_suffix}"

      for argument in "${@}"; do
        case "${argument}" in

          --elixir-version )
            elixir_version="${2? Missing Elixir version!!!}"
            shift 2
            ;;

          --phoenix-version )
            phoenix_version="${2? Missing Phoenix version!!!}"
            shift 2
            ;;

          -d | --detached )
            background_mode="--detach"
            shift 1
            ;;

          -it )
            background_mode="-it"
            shift 1
            ;;

          --db | --database )
            previousbackground_mode=${background_mode}

            Create_Docker_Volume "${CONTAINER_NAME}"

            run_command="postgres"
            background_mode="--detach"
            shift 1

            Start_Docker_Container \
              "${image_name}" \
              "${elixir_version}" \
              "${phoenix_version}" \
              "${dockerfile}" \
              "${APP_NAME}" \
              "${CONTAINER_NAME}" \
              "${CONTAINER_USER}" \
              "${background_mode}" \
              "${run_command}" \
              "${elixirhost_setup_dir}"

            background_mode=${previousbackground_mode}
            ;;

          -h | --help )

            shift 1

            if [ "${1}" = "stack" ]; then
              Show_Help
              exit 0
            fi

            run_command="elixir --help"

            ;;

          --no-cache )
            # not implemented yet
            ;;

          -p | --publish )
            port_map=${2? Missing host port map for the container, eg: 3000:3000 !!!}
            shift 2
            ;;

          -u | --user )
            CONTAINER_USER=${2? Missing user for container!!!}
            shift 2
            ;;

          --dockerfile )
            dockerfile="${2? Missing variant for docker image... eg: alpine}"
            CONTAINER_NAME="${APP_NAME}_$( Get_Docker_Image_Tag "${elixir_version}" "${phoenix_version}" "${dockerfile}" )"
            shift 2
            ;;

          build )
            Build_Docker_Image \
              "${image_name}" \
              "${2:-${dockerfile}}" \
              "${elixir_version}" \
              "${phoenix_version}" \
              "${phoenix_install_from}" \
              "${build_path}"

            exit 0
            ;;

          container-logs )
            sudo docker logs -f "${CONTAINER_NAME}"
            exit 0
            ;;

          down )
            sudo docker stop "${CONTAINER_NAME}"
            exit 0
            ;;

          iex | mix | pgcli )
            run_command=${1}
            shift 1
            ;;

          observer )
            shift 1
            remote_cookie="${1:-${ELIXIR_NODE_COOKIE}}"

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            dockerfile="observer-debian"
            port_map="9999:4000"
            CONTAINER_USER="observer"
            background_mode="-it"

            CONTAINER_IP_ADDRESS=$( Get_Container_Ip_Address "${CONTAINER_NAME}" )

            APP_NODE_NAME="${APP_NAME}@${CONTAINER_IP_ADDRESS}"

            CONTAINER_NAME="observer_${APP_NAME}"

            # to implement over ssh tunnel:
            #   * https://sgeos.github.io/elixir/erlang/observer/2016/09/16/elixir_erlang_running_otp_observer_remotely.html
            #   * https://github.com/Stratus3D/dotfiles/blob/master/scripts/tools/epmd_port_forwarder
            #   * https://github.com/Nebo15/k8s-utils
            #   * https://chazsconi.github.io/2017/04/22/observing-remote-elixir-docker-nodes.html
            #
            # http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server/
            run_command="observer ${APP_NAME} ${CONTAINER_IP_ADDRESS} ${ELIXIR_NODE_COOKIE}"

            ;;

          observer-cli )
            shift 1

            CONTAINER_IP_ADDRESS=$( Get_Container_Ip_Address "${CONTAINER_NAME}" )

            APP_NODE_NAME="${APP_NAME}@${CONTAINER_IP_ADDRESS}"

            remote_shell="${1:-${APP_NODE_NAME}}"

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            dockerfile="observer-debian"
            port_map="9998:4000"
            CONTAINER_USER="observer"
            CONTAINER_NAME="observer_${APP_NAME}"

            run_command="iex --name observer_cli@174.02.0.3 --cookie ${ELIXIR_NODE_COOKIE} --remsh ${remote_shell}"

            cat <<-HEREDOC

  ##############################################################
  #                                                            #
  #     iex(remote-shell@172.24.02)> :observer_cli.start()     #
  #                                                            #
  ##############################################################

HEREDOC

            # TODO:
            #  * observer_cli binary seems not be able to connect to the remote node
            #   from inside a docker container.
            #  * https://chazsconi.github.io/2017/04/22/observing-remote-elixir-docker-nodes.html
            #run_command="observer_cli elixir@b09b4f769088 ${ELIXIR_NODE_COOKIE}"

            ;;

          observer-shell )
            APP_NODE_NAME="${APP_NAME}@$( Get_Container_Ip_Address ${CONTAINER_NAME} )"

            dockerfile="observer-debian"
            port_map="9997:4000"
            CONTAINER_USER="observer"
            CONTAINER_NAME="observer_${APP_NAME}"
            run_command=zsh

            shift 1
            ;;

          up )
            shift 1
            phoenix_command="${1:-phx.server}"

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            APP_NODE_NAME="${APP_NAME}@$( Get_Container_Ip_Address ${CONTAINER_NAME} )"

            # we need to set the --cookie and -sname in order to be able to use the
            # Observer from another docker container in the same docker network.
            #run_command="mix phoenix.server"
            #run_command="elixir --cookie ${ELIXIR_NODE_COOKIE} --name '${APP_NODE_NAME}' -S mix ${1:-phx.server}"
            run_command="elixir-server ${APP_NAME} ${ELIXIR_NODE_COOKIE} ${phoenix_command}"

            ;;

          shell )
            shift 1
            run_command=${1:-zsh}

            if [ "$#" -ge 1 ]; then
              shift 1
            fi

            ;;

        esac
      done


    ############################################################################
    # EXECUTION
    ############################################################################

      Start_Docker_Container \
        "${image_name}" \
        "${elixir_version}" \
        "${phoenix_version}" \
        "${dockerfile}" \
        "${APP_NAME}" \
        "${CONTAINER_NAME}" \
        "${CONTAINER_USER}" \
        "${background_mode}" \
        "${run_command}" \
        "${elixirhost_setup_dir}" \
        "${@}"
  }

Main "${@}"
